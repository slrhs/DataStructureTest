#include<stdio.h>
#include<malloc.h>
#define MaxVertexNum 20

typedef struct node{
	int adjvex;
	int info;
	struct node *next;
}EdgeNode;

typedef struct vnode{
	int vertex;
	int indegree;
	EdgeNode *firstedge;
}VertexNode;

typedef VertexNode AdjList[MaxVertexNum];

typedef struct{
	AdjList adjlist;
	int vexnum,arcnum;
}ALGraph;

void CreateALGraph(ALGraph *&G)
{
	int i,j,k,cost;EdgeNode *s;
	G=(ALGraph *)malloc(sizeof(ALGraph));
	printf("请输入顶点数和边数（输入格式为：顶点数，边数）：\n");
	scanf("%d,%d",&(G->vexnum),&(G->arcnum));
	printf("请输入顶点号（用空格间隔）：\n");
	for(i=0;i<G->vexnum;i++)
		{scanf("%d",&(G->adjlist[i].vertex));
		 G->adjlist[i].firstedge=NULL;
		 G->adjlist[i].indegree=0;
		}
	printf("请输入边的信息（输入格式为：i,j,cost）:\n");
	for(k=0;k<G->arcnum;k++)
	{scanf("\n%d,%d,%d",&i,&j,&cost);
	 s=(EdgeNode*)malloc(sizeof(EdgeNode));
	 s->adjvex=j;
	 s->info=cost;
	 s->next=G->adjlist[i].firstedge;
	 G->adjlist[i].firstedge=s;
	 G->adjlist[j].indegree++;
	}
}

int TopoSort(ALGraph *G,int s1[MaxVertexNum],int ve[MaxVertexNum])
{//1
	int i,j,k,m=0,num=0,stack[MaxVertexNum];EdgeNode *p;
	for(i=0;i<G->vexnum;i++)
	{if(G->adjlist[i].indegree==0)
		{stack[num]=i;num++;}}
	for(i=0;i<G->vexnum;i++)
		{ve[i]=0;}
	while(num!=0)
	{j=stack[num-1];//2
	s1[m]=j;
	m++;num--;
	p=G->adjlist[j].firstedge;
	while(p!=NULL)
	{k=p->adjvex;//3
	G->adjlist[k].indegree--;
	if(G->adjlist[k].indegree==0)
	{stack[num]=k;
	num++;
	}
	if(ve[j]+p->info>ve[k])
	{ve[k]=ve[j]+p->info;}
	p=p->next;
	}//3
}//2
 if(m!=G->vexnum)
	 return 0;
 else
	 return 1;
}

int CriticalPath(ALGraph *G,int T[MaxVertexNum])
{//1                                                                              
	int i,j,k,e,l,tag,dut,v1[MaxVertexNum],ve[MaxVertexNum];
	EdgeNode *p;
	if(!TopoSort(G,T,ve))
	{printf("网中存在环\n");
	return 0;
	}
	for(i=0;i<G->vexnum;i++)
	{v1[i]=ve[G->vexnum-1];}//2
	for(i=G->vexnum-1;i>=0;i--)
	{j=T[i];p=G->adjlist[j].firstedge;//3
	while(p!=NULL)
	{k=p->adjvex;dut=p->info;//4
	if(v1[k]-dut<v1[j])
	{v1[j]=v1[k]-dut;}
	p=p->next;
	}//4
}//3
printf("各活动的情况(‘*’表示关键活动)\n");
for(j=0;j<G->vexnum;++j)
for(p=G->adjlist[j].firstedge;p;p=p->next)
{k=p->adjvex;dut=p->info;
e=ve[j];
l=v1[k]-dut;
tag=(e==l)?'*':' ';
printf("v%d,v%d,活动持续时间%d,最早发生时间%d,最迟发生时间%d,tag%c \n",
	   j,k,dut,e,l,tag);
}
return 1;
}//2



main()
	{
		ALGraph *G;int s1[MaxVertexNum],ve[MaxVertexNum];
		CreateALGraph(G);
		CriticalPath(G,s1);
	}

                                                                               