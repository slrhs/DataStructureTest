#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#define MaxVertexNum 20    //最大顶点数为20

typedef struct node{       //边表结点
	int adjvex;            //邻接点域
	struct node *next;     //指向下一个邻接点的指针域 
	//若要表示边上的权信息，则应增加一个数据域info
}EdgeNode;

typedef struct vnode{      //顶点表结点v
	int vertex;            //顶点域
	EdgeNode *firstedge;   //边表头指针
}VertexNode;

typedef VertexNode AdjList[MaxVertexNum];   //AdjList是邻接表类型

typedef struct{
	AdjList adjlist;       //邻接表
	int vexnum, arcnum;     //顶点数和边数
}ALGraph;                  //ALGraph是以邻接表方式存储的

void CreateALGraph(ALGraph *&G)
{
	int i, j, k; EdgeNode *s;
	G = (ALGraph *)malloc(sizeof(ALGraph));
	printf("请输入顶点数和边数（输入格式：顶点数，边数）：\n");
	scanf("%d,%d", &(G->vexnum), &(G->arcnum)); //读入顶点数和边数
	printf("请输入顶点号（逗号间隔）：\n");
	for (i = 0; i<G->vexnum; i++)                     //建立有n个顶点的顶点表
	{
		scanf("%d,", &(G->adjlist[i].vertex));    //读顶点信息
		G->adjlist[i].firstedge = NULL;            //顶点的边表头指针设为空
	}
	printf("请输入边的信息（输入格式：i,j）：\n");
	for (k = 0; k<G->arcnum; k++)                     //建立边表
	{
		scanf("\n%d,%d", &i, &j);                  //读入边<vi,vj>的顶点对应序号
		s = (EdgeNode*)malloc(sizeof(EdgeNode));   //生成新边表结点s
		s->adjvex = j;                             //邻接点序号为j
		s->next = G->adjlist[i].firstedge;         //将新边表结点s插入到顶点vi的边表头部
		G->adjlist[i].firstedge = s;               //将边<i,j>链入邻接表
		s = (EdgeNode*)malloc(sizeof(EdgeNode));   //生成新边表结点s
		s->adjvex = i;                             //邻接点序号为i
		s->next = G->adjlist[j].firstedge;         //将新边表结点s插入到顶点vj的边表头部
		G->adjlist[j].firstedge = s;               //将边<j,i>链入邻接表
	}
}

void PrintALGraph(ALGraph *G)
{    //输出邻接表存储
	int i; EdgeNode *p;
	for (i = 0; i<G->vexnum; i++)
	{
		printf("v%d  ", (G->adjlist[i].vertex)); //输出顶点信息
		p = G->adjlist[i].firstedge;
		while (p != NULL){ printf("-->%d", p->adjvex); p = p->next; }
		printf("∧\n");
	}
}

void DFSAL(ALGraph *G, int i, int visited[MaxVertexNum])
{
	EdgeNode *p;
	printf("V%d ", G->adjlist[i].vertex);      //访问顶点vi
	visited[i] = 1;                            //标记vi已访问
	p = G->adjlist[i].firstedge;               //取vi边表的头指针
	while (p)
	{
		if (!visited[p->adjvex])
			DFSAL(G, p->adjvex, visited);
		p = p->next;                           //找vi的下一个邻接点
	}
}

void DFSALTraverse(ALGraph *G)
{   //深度优先遍历
	int i, visited[MaxVertexNum];
	for (i = 0; i<G->vexnum; i++) visited[i] = 0;
	for (i = 0; i<G->vexnum; i++)
		if (!visited[i]) DFSAL(G, i, visited);
}

void BFSAL(ALGraph *G, int i, int visited[MaxVertexNum])
{
	EdgeNode *p; int w;
	int queue[MaxVertexNum]; int front = 0, rear = 0;
	printf("V%d ", G->adjlist[i].vertex);
	visited[i] = 1;
	rear = (rear + 1) % MaxVertexNum;
	queue[rear] = i;
	while (front != rear)
	{
		front = (front + 1) % MaxVertexNum;
		w = queue[front];
		p = G->adjlist[w].firstedge;
		while (p != NULL)
		{
			if (!visited[p->adjvex])
			{
				printf("V%d  ", p->adjvex);
				visited[p->adjvex] = 1;
				rear = (rear + 1) % MaxVertexNum;
				queue[rear] = p->adjvex;
			}
			p = p->next;
		}
	}
}

void BFSTraverse(ALGraph *G)
{
	int i, visited[MaxVertexNum];
	for (i = 0; i<G->vexnum; i++) visited[i] = 0;
	for (i = 0; i<G->vexnum; i++)
		if (!visited[i])
			BFSAL(G, i, visited);
}

int main()
{
	int t; ALGraph *G;
	CreateALGraph(G);
	PrintALGraph(G);
	do
	{
		printf("请选择遍历方式\n");
		printf("1 深度优先遍历\n");
		printf("2 广度优先遍历\n");
		printf("3 结束程序运行\n");
		scanf("%d", &t);
		switch (t)
		{
		case 1:
			printf("深度优先遍历序列：\n");
			DFSALTraverse(G);
			printf("\n");
			break;
		case 2:
			printf("广度优先遍历序列：\n");
			BFSTraverse(G);
			printf("\n");
			break;
		case 3:
			exit(0);
			break;
		default:
			printf("输入错误，只能选择1或2！");
		}
	} while (t <= 3);
	return 0;
}








