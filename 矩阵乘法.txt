#define MAXSIZE 1000
#define MAXROW 100
#define  _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>

typedef struct
{
	int row, col;
	int e;
}Triple;

typedef struct
{
	Triple data[MAXSIZE + 1];
	int position[MAXROW + 1];
	int m, n, len;
}TSMatrix;


void init_matrix(TSMatrix*M,int p)
{
	int x, y, z;
	int mrow = 0, mcol = 0; M->len = 0;
	if (p == 1) { printf("请输入A矩阵的行数row，列数col，数据e，输入0,0,0结束输入\n"); }
	else{ printf("请输入B矩阵的行数row，列数col，数据e，输入0,0,0结束输入\n"); }
	for (int i = 1;; i++)
	{
		scanf("%d,%d,%d", &x, &y, &z);
		if (x == 0 && y == 0 && z == 0) break;
		M->data[i].row = x; M->data[i].col = y; M->data[i].e = z;
		M->len++;
		if (mrow < x) mrow = x;
		if (mcol < y) mcol = y;
	}
	M->m = mrow; M->n = mcol;
}

void firstrowdata(TSMatrix *C)
{
	int number[100];
	for (int i = 1; i <= C->m; i++) number[i]=0;
	for (int j = 1; j <= C->len; j++) number[C->data[j].row]++;
	C->position[1] = 1;
	for (int k = 2; k <= C->m; k++) C->position[k] = C->position[k - 1] + number[k - 1];
}

void MultMatrix(TSMatrix A, TSMatrix B, TSMatrix *C)
{      
	if (A.n != B.m) return 0;
	C->m = A.m; C->n = B.n; C->len = 0; int sum[100]; int ta,tb; int brow,ccol;
	firstrowdata(&A); firstrowdata(&B);
	if (A.len*B.len != 0)
	{
		for (int arow = 1; arow <= A.m; arow++)      
		{
			for (int ccol = 1; ccol <= C->n; ccol++)  sum[ccol] = 0;
			C->position[arow] = C->len + 1;  
			if (arow<A.m)
				ta = A.position[arow + 1];
			else ta = A.len + 1;
			for (int p = A.position[arow]; p<ta; p++)
			{
				brow = A.data[p].col;          
				if (brow<B.m)  
					tb = B.position[brow + 1];
				else tb = B.len + 1;
				for (int q = B.position[brow]; q<tb; q++)
				{
					ccol = B.data[q].col;    
					sum[ccol] += A.data[p].e*B.data[q].e;
				}
			}
			for (ccol = 1; ccol <= C->n; ccol++)
				if (sum[ccol])
				{
				if (++C->len>MAXSIZE) return 0;
				C->data[C->len].row = arow;
				C->data[C->len].col = ccol;
				C->data[C->len].e = sum[ccol];
				}
		}
	}
}


void show_matrix(TSMatrix *T, int p)
{
	int shuju[100] = { 0 };
	int k = 0;
	for (int i = 1; i <= T->len; i++)
	{
		k = ((T->data[i].row) - 1)*(T->n) + (T->data[i].col) - 1;
		shuju[k] = T->data[i].e;
	}
	if (p == 1) 
	{ printf("A矩阵为\n"); }
	else if(p==2)
	{ printf("B矩阵为\n"); }
	else if (p==3)
	{printf("C矩阵为(C=AxB)\n");}
	for (int j = 0; j < T->m*T->n; j++)
	{
		printf("%5d", shuju[j]);
		if ((j + 1) % T->n == 0)printf("\n");
	}
	printf("\n");
}

void main()
{
	TSMatrix A;
	TSMatrix B;
	TSMatrix C;
	init_matrix(&A, 1);	printf("\n");
	show_matrix(&A, 1);
	init_matrix(&B, 2);	printf("\n");
	show_matrix(&B, 2);
	MultMatrix(A, B, &C);
	show_matrix(&C, 3);
	system("pause");
}